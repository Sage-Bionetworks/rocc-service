name: ci

on:
  schedule:
    - cron: '0 10 * * *' # everyday at 10am
  push:
    branches:
      - main
      - develop
    tags:
      - '*.*.*'
  pull_request:

env:
  docker_repository: sagebionetworks/rocc

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Lint Dockerfiles
      uses: docker://hadolint/hadolint:latest
      with:
        entrypoint: hadolint
        args: server/Dockerfile
    - name: Check that packages in requirements.txt files are in asc order
      run: |
        sort -f --check server/requirements.txt
        sort -f --check server/test-requirements.txt
    - name: Lint Python code with Flake8
      uses: docker://alpine/flake8:latest
      with:
        args: --config server/setup.cfg server

  test:
    needs: [lint]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]  # 3.9
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        cd server
        python -m pip install --upgrade pip
        pip install tox tox-gh-actions coveralls
    - name: Test with tox
      run: |
        cd server
        tox
    - name: Prepare environment
      run: |
        echo "PYTHON_ENV=$(echo py${{ matrix.python-version }} | tr -d .)" >> $GITHUB_ENV
    - name: Coveralls Parallel
      env:
        COVERALLS_FLAG_NAME: ${{ env.PYTHON_ENV }}
        COVERALLS_PARALLEL: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd server
        coveralls
    # - name: Test with tox
    #   # env:
    #   #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   #   COVERALLS_FLAG_NAME: ${PYTHON_ENV}
    #   #   COVERALLS_PARALLEL: true
    #     # COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
    #   run: |
    #     cd server
    #     tox
    #   # tox -e ${PYTHON_ENV}-coveralls
    # - name: Coveralls Parallel
    #   uses: coverallsapp/github-action@master
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     flag-name: run-${{ env.PYTHON_ENV }}
    #     parallel: true

  # finish-coveralls:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Coveralls Finished
  #     uses: coverallsapp/github-action@master
  #     with:
  #       github-token: ${{ secrets.GITHUB_TOKEN }}
  #       parallel-finished: true
  #       base-path: server

  finish-coveralls:
    needs: test
    runs-on: ubuntu-latest
    container: python:3-slim
    steps:
    - name: Finish Coveralls Parallel
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pip3 install --upgrade coveralls
        coveralls --finish

  docker:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Prepare
      id: prep
      run: |
        DOCKER_IMAGE=${{ env.docker_repository }}
        VERSION=noop
        PUSH=false
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
          PUSH=true
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
            VERSION=edge
            PUSH=true
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
          PUSH=true
        # elif [ "${{ github.event_name }}" = "push" ]; then
        #   TAGS="$TAGS,${DOCKER_IMAGE}:sha-${GITHUB_SHA::8}"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=push::${PUSH}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      if: steps.prep.outputs.push == 'true'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: server
        file: server/Dockerfile
        platforms: linux/amd64
        push: ${{ steps.prep.outputs.push }}
        tags: ${{ steps.prep.outputs.tags }}
        labels: |
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
    - name: Docker Hub Description
      if: steps.prep.outputs.push == 'true'
      uses: peter-evans/dockerhub-description@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: ${{ env.docker_repository }}