# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.entity import Entity
from openapi_server import util

from openapi_server.models.entity import Entity  # noqa: E501

class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username=None, first_name=None, last_name=None, email=None, id=None, created_by=None, created_at=None, updated_by=None, updated_at=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param id: The id of this User.  # noqa: E501
        :type id: int
        :param created_by: The created_by of this User.  # noqa: E501
        :type created_by: User
        :param created_at: The created_at of this User.  # noqa: E501
        :type created_at: datetime
        :param updated_by: The updated_by of this User.  # noqa: E501
        :type updated_by: User
        :param updated_at: The updated_at of this User.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'username': str,
            'first_name': str,
            'last_name': str,
            'email': str,
            'id': int,
            'created_by': User,
            'created_at': datetime,
            'updated_by': User,
            'updated_at': datetime
        }

        self.attribute_map = {
            'username': 'username',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email': 'email',
            'id': 'id',
            'created_by': 'createdBy',
            'created_at': 'createdAt',
            'updated_by': 'updatedBy',
            'updated_at': 'updatedAt'
        }

        self._username = username
        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._id = id
        self._created_by = created_by
        self._created_at = created_at
        self._updated_by = updated_by
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this User.

        User supplied username  # noqa: E501

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this User.

        User supplied username  # noqa: E501

        :param username: The username of this User.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if username is not None and len(username) < 4:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `4`")  # noqa: E501

        self._username = username

    @property
    def first_name(self):
        """Gets the first_name of this User.

        User first name  # noqa: E501

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        User first name  # noqa: E501

        :param first_name: The first_name of this User.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if first_name is not None and len(first_name) < 1:
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.

        User last name  # noqa: E501

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        User last name  # noqa: E501

        :param last_name: The last_name of this User.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501
        if last_name is not None and len(last_name) < 1:
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this User.

        User email address  # noqa: E501

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        User email address  # noqa: E501

        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def id(self):
        """Gets the id of this User.

        ID  # noqa: E501

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        ID  # noqa: E501

        :param id: The id of this User.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_by(self):
        """Gets the created_by of this User.


        :return: The created_by of this User.
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this User.


        :param created_by: The created_by of this User.
        :type created_by: User
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this User.

        When the entity has been created  # noqa: E501

        :return: The created_at of this User.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.

        When the entity has been created  # noqa: E501

        :param created_at: The created_at of this User.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_by(self):
        """Gets the updated_by of this User.


        :return: The updated_by of this User.
        :rtype: User
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this User.


        :param updated_by: The updated_by of this User.
        :type updated_by: User
        """

        self._updated_by = updated_by

    @property
    def updated_at(self):
        """Gets the updated_at of this User.

        When the entity has been updated  # noqa: E501

        :return: The updated_at of this User.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.

        When the entity has been updated  # noqa: E501

        :param updated_at: The updated_at of this User.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
