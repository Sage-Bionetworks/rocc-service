# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ChallengeResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, n_final_submissions=None, n_registered_participants=None):  # noqa: E501
        """ChallengeResults - a model defined in OpenAPI

        :param n_final_submissions: The n_final_submissions of this ChallengeResults.  # noqa: E501
        :type n_final_submissions: int
        :param n_registered_participants: The n_registered_participants of this ChallengeResults.  # noqa: E501
        :type n_registered_participants: int
        """
        self.openapi_types = {
            'n_final_submissions': int,
            'n_registered_participants': int
        }

        self.attribute_map = {
            'n_final_submissions': 'nFinalSubmissions',
            'n_registered_participants': 'nRegisteredParticipants'
        }

        self._n_final_submissions = n_final_submissions
        self._n_registered_participants = n_registered_participants

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengeResults of this ChallengeResults.  # noqa: E501
        :rtype: ChallengeResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def n_final_submissions(self):
        """Gets the n_final_submissions of this ChallengeResults.

        Number of final submissions  # noqa: E501

        :return: The n_final_submissions of this ChallengeResults.
        :rtype: int
        """
        return self._n_final_submissions

    @n_final_submissions.setter
    def n_final_submissions(self, n_final_submissions):
        """Sets the n_final_submissions of this ChallengeResults.

        Number of final submissions  # noqa: E501

        :param n_final_submissions: The n_final_submissions of this ChallengeResults.
        :type n_final_submissions: int
        """
        if n_final_submissions is not None and n_final_submissions < 0:  # noqa: E501
            raise ValueError("Invalid value for `n_final_submissions`, must be a value greater than or equal to `0`")  # noqa: E501

        self._n_final_submissions = n_final_submissions

    @property
    def n_registered_participants(self):
        """Gets the n_registered_participants of this ChallengeResults.

        Number of registered participants  # noqa: E501

        :return: The n_registered_participants of this ChallengeResults.
        :rtype: int
        """
        return self._n_registered_participants

    @n_registered_participants.setter
    def n_registered_participants(self, n_registered_participants):
        """Sets the n_registered_participants of this ChallengeResults.

        Number of registered participants  # noqa: E501

        :param n_registered_participants: The n_registered_participants of this ChallengeResults.
        :type n_registered_participants: int
        """
        if n_registered_participants is not None and n_registered_participants < 0:  # noqa: E501
            raise ValueError("Invalid value for `n_registered_participants`, must be a value greater than or equal to `0`")  # noqa: E501

        self._n_registered_participants = n_registered_participants
