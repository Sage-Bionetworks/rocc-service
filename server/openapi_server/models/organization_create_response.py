# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util


class OrganizationCreateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, organization_id=None):  # noqa: E501
        """OrganizationCreateResponse - a model defined in OpenAPI

        :param organization_id: The organization_id of this OrganizationCreateResponse.  # noqa: E501
        :type organization_id: str
        """
        self.openapi_types = {
            'organization_id': str
        }

        self.attribute_map = {
            'organization_id': 'organizationId'
        }

        self._organization_id = organization_id

    @classmethod
    def from_dict(cls, dikt) -> 'OrganizationCreateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrganizationCreateResponse of this OrganizationCreateResponse.  # noqa: E501
        :rtype: OrganizationCreateResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def organization_id(self):
        """Gets the organization_id of this OrganizationCreateResponse.

        The ID of the organization  # noqa: E501

        :return: The organization_id of this OrganizationCreateResponse.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OrganizationCreateResponse.

        The ID of the organization  # noqa: E501

        :param organization_id: The organization_id of this OrganizationCreateResponse.
        :type organization_id: str
        """
        if organization_id is not None and len(organization_id) > 60:
            raise ValueError("Invalid value for `organization_id`, length must be less than or equal to `60`")  # noqa: E501
        if organization_id is not None and len(organization_id) < 3:
            raise ValueError("Invalid value for `organization_id`, length must be greater than or equal to `3`")  # noqa: E501
        if organization_id is not None and not re.search(r'^[a-z0-9]+(?:-[a-z0-9]+)*$', organization_id):  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must be a follow pattern or equal to `/^[a-z0-9]+(?:-[a-z0-9]+)*$/`")  # noqa: E501

        self._organization_id = organization_id
