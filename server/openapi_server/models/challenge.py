# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.challenge_create_request import ChallengeCreateRequest
from openapi_server.models.challenge_create_response import ChallengeCreateResponse
from openapi_server.models.challenge_status import ChallengeStatus
import re
from openapi_server import util

from openapi_server.models.challenge_create_request import ChallengeCreateRequest  # noqa: E501
from openapi_server.models.challenge_create_response import ChallengeCreateResponse  # noqa: E501
from openapi_server.models.challenge_status import ChallengeStatus  # noqa: E501
import re  # noqa: E501

class Challenge(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, description=None, summary=None, start_date=None, end_date=None, url=None, status=None, tag_ids=None, organizer_ids=None, data_provider_ids=None):  # noqa: E501
        """Challenge - a model defined in OpenAPI

        :param id: The id of this Challenge.  # noqa: E501
        :type id: str
        :param name: The name of this Challenge.  # noqa: E501
        :type name: str
        :param description: The description of this Challenge.  # noqa: E501
        :type description: str
        :param summary: The summary of this Challenge.  # noqa: E501
        :type summary: str
        :param start_date: The start_date of this Challenge.  # noqa: E501
        :type start_date: date
        :param end_date: The end_date of this Challenge.  # noqa: E501
        :type end_date: date
        :param url: The url of this Challenge.  # noqa: E501
        :type url: str
        :param status: The status of this Challenge.  # noqa: E501
        :type status: ChallengeStatus
        :param tag_ids: The tag_ids of this Challenge.  # noqa: E501
        :type tag_ids: List[str]
        :param organizer_ids: The organizer_ids of this Challenge.  # noqa: E501
        :type organizer_ids: List[str]
        :param data_provider_ids: The data_provider_ids of this Challenge.  # noqa: E501
        :type data_provider_ids: List[str]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'description': str,
            'summary': str,
            'start_date': date,
            'end_date': date,
            'url': str,
            'status': ChallengeStatus,
            'tag_ids': List[str],
            'organizer_ids': List[str],
            'data_provider_ids': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'summary': 'summary',
            'start_date': 'startDate',
            'end_date': 'endDate',
            'url': 'url',
            'status': 'status',
            'tag_ids': 'tagIds',
            'organizer_ids': 'organizerIds',
            'data_provider_ids': 'dataProviderIds'
        }

        self._id = id
        self._name = name
        self._description = description
        self._summary = summary
        self._start_date = start_date
        self._end_date = end_date
        self._url = url
        self._status = status
        self._tag_ids = tag_ids
        self._organizer_ids = organizer_ids
        self._data_provider_ids = data_provider_ids

    @classmethod
    def from_dict(cls, dikt) -> 'Challenge':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Challenge of this Challenge.  # noqa: E501
        :rtype: Challenge
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Challenge.

        The ID of the challenge  # noqa: E501

        :return: The id of this Challenge.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Challenge.

        The ID of the challenge  # noqa: E501

        :param id: The id of this Challenge.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 60:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `60`")  # noqa: E501
        if id is not None and len(id) < 3:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `3`")  # noqa: E501
        if id is not None and not re.search(r'^[a-z0-9]+(?:-[a-z0-9]+)*$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-z0-9]+(?:-[a-z0-9]+)*$/`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Challenge.

        The challenge name  # noqa: E501

        :return: The name of this Challenge.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Challenge.

        The challenge name  # noqa: E501

        :param name: The name of this Challenge.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 60:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")  # noqa: E501
        if name is not None and len(name) < 3:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `3`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Challenge.

        A short description of the challenge  # noqa: E501

        :return: The description of this Challenge.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Challenge.

        A short description of the challenge  # noqa: E501

        :param description: The description of this Challenge.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) > 280:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `280`")  # noqa: E501

        self._description = description

    @property
    def summary(self):
        """Gets the summary of this Challenge.

        The summary of challenge  # noqa: E501

        :return: The summary of this Challenge.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Challenge.

        The summary of challenge  # noqa: E501

        :param summary: The summary of this Challenge.
        :type summary: str
        """

        self._summary = summary

    @property
    def start_date(self):
        """Gets the start_date of this Challenge.

        When the challenge started  # noqa: E501

        :return: The start_date of this Challenge.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Challenge.

        When the challenge started  # noqa: E501

        :param start_date: The start_date of this Challenge.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Challenge.

        When the challenge ended  # noqa: E501

        :return: The end_date of this Challenge.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Challenge.

        When the challenge ended  # noqa: E501

        :param end_date: The end_date of this Challenge.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def url(self):
        """Gets the url of this Challenge.

        The URL to the challenge website  # noqa: E501

        :return: The url of this Challenge.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Challenge.

        The URL to the challenge website  # noqa: E501

        :param url: The url of this Challenge.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def status(self):
        """Gets the status of this Challenge.


        :return: The status of this Challenge.
        :rtype: ChallengeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Challenge.


        :param status: The status of this Challenge.
        :type status: ChallengeStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def tag_ids(self):
        """Gets the tag_ids of this Challenge.

        The tags associated to the challenge  # noqa: E501

        :return: The tag_ids of this Challenge.
        :rtype: List[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this Challenge.

        The tags associated to the challenge  # noqa: E501

        :param tag_ids: The tag_ids of this Challenge.
        :type tag_ids: List[str]
        """
        if tag_ids is None:
            raise ValueError("Invalid value for `tag_ids`, must not be `None`")  # noqa: E501

        self._tag_ids = tag_ids

    @property
    def organizer_ids(self):
        """Gets the organizer_ids of this Challenge.

        The organizers of the challenge  # noqa: E501

        :return: The organizer_ids of this Challenge.
        :rtype: List[str]
        """
        return self._organizer_ids

    @organizer_ids.setter
    def organizer_ids(self, organizer_ids):
        """Sets the organizer_ids of this Challenge.

        The organizers of the challenge  # noqa: E501

        :param organizer_ids: The organizer_ids of this Challenge.
        :type organizer_ids: List[str]
        """
        if organizer_ids is None:
            raise ValueError("Invalid value for `organizer_ids`, must not be `None`")  # noqa: E501

        self._organizer_ids = organizer_ids

    @property
    def data_provider_ids(self):
        """Gets the data_provider_ids of this Challenge.

        The organizations contributing the data  # noqa: E501

        :return: The data_provider_ids of this Challenge.
        :rtype: List[str]
        """
        return self._data_provider_ids

    @data_provider_ids.setter
    def data_provider_ids(self, data_provider_ids):
        """Sets the data_provider_ids of this Challenge.

        The organizations contributing the data  # noqa: E501

        :param data_provider_ids: The data_provider_ids of this Challenge.
        :type data_provider_ids: List[str]
        """
        if data_provider_ids is None:
            raise ValueError("Invalid value for `data_provider_ids`, must not be `None`")  # noqa: E501

        self._data_provider_ids = data_provider_ids
