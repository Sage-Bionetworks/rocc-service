# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.tag_create_request import TagCreateRequest
from openapi_server.models.tag_create_response import TagCreateResponse
import re
from openapi_server import util

from openapi_server.models.tag_create_request import TagCreateRequest  # noqa: E501
from openapi_server.models.tag_create_response import TagCreateResponse  # noqa: E501
import re  # noqa: E501

class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, description=None):  # noqa: E501
        """Tag - a model defined in OpenAPI

        :param id: The id of this Tag.  # noqa: E501
        :type id: str
        :param description: The description of this Tag.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'id': str,
            'description': str
        }

        self.attribute_map = {
            'id': 'id',
            'description': 'description'
        }

        self._id = id
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tag of this Tag.  # noqa: E501
        :rtype: Tag
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Tag.

        The ID of the tag  # noqa: E501

        :return: The id of this Tag.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.

        The ID of the tag  # noqa: E501

        :param id: The id of this Tag.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 60:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `60`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501
        if id is not None and not re.search(r'^[a-z0-9]+(?:-[a-z0-9]+)*$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[a-z0-9]+(?:-[a-z0-9]+)*$/`")  # noqa: E501

        self._id = id

    @property
    def description(self):
        """Gets the description of this Tag.

        A short description of the tag  # noqa: E501

        :return: The description of this Tag.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Tag.

        A short description of the tag  # noqa: E501

        :param description: The description of this Tag.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description
