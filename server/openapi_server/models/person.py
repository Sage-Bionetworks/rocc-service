# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.person_create_request import PersonCreateRequest
from openapi_server.models.person_create_response import PersonCreateResponse
from openapi_server import util

from openapi_server.models.person_create_request import PersonCreateRequest  # noqa: E501
from openapi_server.models.person_create_response import PersonCreateResponse  # noqa: E501

class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, email=None, organization_ids=None):  # noqa: E501
        """Person - a model defined in OpenAPI

        :param id: The id of this Person.  # noqa: E501
        :type id: str
        :param name: The name of this Person.  # noqa: E501
        :type name: str
        :param email: The email of this Person.  # noqa: E501
        :type email: str
        :param organization_ids: The organization_ids of this Person.  # noqa: E501
        :type organization_ids: List[str]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'email': str,
            'organization_ids': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'email': 'email',
            'organization_ids': 'organizationIds'
        }

        self._id = id
        self._name = name
        self._email = email
        self._organization_ids = organization_ids

    @classmethod
    def from_dict(cls, dikt) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Person of this Person.  # noqa: E501
        :rtype: Person
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Person.

        The unique identifier of a person  # noqa: E501

        :return: The id of this Person.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.

        The unique identifier of a person  # noqa: E501

        :param id: The id of this Person.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Person.


        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.


        :param name: The name of this Person.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this Person.

        An email address  # noqa: E501

        :return: The email of this Person.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Person.

        An email address  # noqa: E501

        :param email: The email of this Person.
        :type email: str
        """

        self._email = email

    @property
    def organization_ids(self):
        """Gets the organization_ids of this Person.


        :return: The organization_ids of this Person.
        :rtype: List[str]
        """
        return self._organization_ids

    @organization_ids.setter
    def organization_ids(self, organization_ids):
        """Sets the organization_ids of this Person.


        :param organization_ids: The organization_ids of this Person.
        :type organization_ids: List[str]
        """
        if organization_ids is None:
            raise ValueError("Invalid value for `organization_ids`, must not be `None`")  # noqa: E501

        self._organization_ids = organization_ids
