# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.challenge_status import ChallengeStatus
from openapi_server import util

from openapi_server.models.challenge_status import ChallengeStatus  # noqa: E501

class ChallengeFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, status=None, organizers=None, tags=None):  # noqa: E501
        """ChallengeFilter - a model defined in OpenAPI

        :param name: The name of this ChallengeFilter.  # noqa: E501
        :type name: str
        :param status: The status of this ChallengeFilter.  # noqa: E501
        :type status: ChallengeStatus
        :param organizers: The organizers of this ChallengeFilter.  # noqa: E501
        :type organizers: List[str]
        :param tags: The tags of this ChallengeFilter.  # noqa: E501
        :type tags: List[str]
        """
        self.openapi_types = {
            'name': str,
            'status': ChallengeStatus,
            'organizers': List[str],
            'tags': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'organizers': 'organizers',
            'tags': 'tags'
        }

        self._name = name
        self._status = status
        self._organizers = organizers
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengeFilter of this ChallengeFilter.  # noqa: E501
        :rtype: ChallengeFilter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ChallengeFilter.

        Keep the challenges whose name include this term  # noqa: E501

        :return: The name of this ChallengeFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChallengeFilter.

        Keep the challenges whose name include this term  # noqa: E501

        :param name: The name of this ChallengeFilter.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this ChallengeFilter.


        :return: The status of this ChallengeFilter.
        :rtype: ChallengeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChallengeFilter.


        :param status: The status of this ChallengeFilter.
        :type status: ChallengeStatus
        """

        self._status = status

    @property
    def organizers(self):
        """Gets the organizers of this ChallengeFilter.

        Keep the challenges organized by these persons  # noqa: E501

        :return: The organizers of this ChallengeFilter.
        :rtype: List[str]
        """
        return self._organizers

    @organizers.setter
    def organizers(self, organizers):
        """Sets the organizers of this ChallengeFilter.

        Keep the challenges organized by these persons  # noqa: E501

        :param organizers: The organizers of this ChallengeFilter.
        :type organizers: List[str]
        """

        self._organizers = organizers

    @property
    def tags(self):
        """Gets the tags of this ChallengeFilter.

        Keep the challenges associated to these tags  # noqa: E501

        :return: The tags of this ChallengeFilter.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ChallengeFilter.

        Keep the challenges associated to these tags  # noqa: E501

        :param tags: The tags of this ChallengeFilter.
        :type tags: List[str]
        """

        self._tags = tags
