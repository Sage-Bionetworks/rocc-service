# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.challenge_status import ChallengeStatus
from openapi_server import util

from openapi_server.models.challenge_status import ChallengeStatus  # noqa: E501

class ChallengeFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, status=None, organizer=None, tag=None):  # noqa: E501
        """ChallengeFilter - a model defined in OpenAPI

        :param name: The name of this ChallengeFilter.  # noqa: E501
        :type name: str
        :param status: The status of this ChallengeFilter.  # noqa: E501
        :type status: ChallengeStatus
        :param organizer: The organizer of this ChallengeFilter.  # noqa: E501
        :type organizer: str
        :param tag: The tag of this ChallengeFilter.  # noqa: E501
        :type tag: str
        """
        self.openapi_types = {
            'name': str,
            'status': ChallengeStatus,
            'organizer': str,
            'tag': str
        }

        self.attribute_map = {
            'name': 'name',
            'status': 'status',
            'organizer': 'organizer',
            'tag': 'tag'
        }

        self._name = name
        self._status = status
        self._organizer = organizer
        self._tag = tag

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengeFilter of this ChallengeFilter.  # noqa: E501
        :rtype: ChallengeFilter
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ChallengeFilter.

        Keep the challenges whose name include this term  # noqa: E501

        :return: The name of this ChallengeFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChallengeFilter.

        Keep the challenges whose name include this term  # noqa: E501

        :param name: The name of this ChallengeFilter.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this ChallengeFilter.


        :return: The status of this ChallengeFilter.
        :rtype: ChallengeStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ChallengeFilter.


        :param status: The status of this ChallengeFilter.
        :type status: ChallengeStatus
        """

        self._status = status

    @property
    def organizer(self):
        """Gets the organizer of this ChallengeFilter.

        Keep the challenges organized by this person  # noqa: E501

        :return: The organizer of this ChallengeFilter.
        :rtype: str
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer):
        """Sets the organizer of this ChallengeFilter.

        Keep the challenges organized by this person  # noqa: E501

        :param organizer: The organizer of this ChallengeFilter.
        :type organizer: str
        """

        self._organizer = organizer

    @property
    def tag(self):
        """Gets the tag of this ChallengeFilter.

        Keep the challenges associated to this tag  # noqa: E501

        :return: The tag of this ChallengeFilter.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this ChallengeFilter.

        Keep the challenges associated to this tag  # noqa: E501

        :param tag: The tag of this ChallengeFilter.
        :type tag: str
        """

        self._tag = tag
