# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.challenge_organizer_role import ChallengeOrganizerRole
import re
from openapi_server import util

from openapi_server.models.challenge_organizer_role import ChallengeOrganizerRole  # noqa: E501
import re  # noqa: E501

class ChallengeOrganizerCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, login=None, organizer_roles=None):  # noqa: E501
        """ChallengeOrganizerCreateRequest - a model defined in OpenAPI

        :param name: The name of this ChallengeOrganizerCreateRequest.  # noqa: E501
        :type name: str
        :param login: The login of this ChallengeOrganizerCreateRequest.  # noqa: E501
        :type login: str
        :param organizer_roles: The organizer_roles of this ChallengeOrganizerCreateRequest.  # noqa: E501
        :type organizer_roles: List[ChallengeOrganizerRole]
        """
        self.openapi_types = {
            'name': str,
            'login': str,
            'organizer_roles': List[ChallengeOrganizerRole]
        }

        self.attribute_map = {
            'name': 'name',
            'login': 'login',
            'organizer_roles': 'organizerRoles'
        }

        self._name = name
        self._login = login
        self._organizer_roles = organizer_roles

    @classmethod
    def from_dict(cls, dikt) -> 'ChallengeOrganizerCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChallengeOrganizerCreateRequest of this ChallengeOrganizerCreateRequest.  # noqa: E501
        :rtype: ChallengeOrganizerCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ChallengeOrganizerCreateRequest.


        :return: The name of this ChallengeOrganizerCreateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChallengeOrganizerCreateRequest.


        :param name: The name of this ChallengeOrganizerCreateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def login(self):
        """Gets the login of this ChallengeOrganizerCreateRequest.

        The user or organization account name  # noqa: E501

        :return: The login of this ChallengeOrganizerCreateRequest.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this ChallengeOrganizerCreateRequest.

        The user or organization account name  # noqa: E501

        :param login: The login of this ChallengeOrganizerCreateRequest.
        :type login: str
        """
        if login is not None and len(login) > 25:
            raise ValueError("Invalid value for `login`, length must be less than or equal to `25`")  # noqa: E501
        if login is not None and len(login) < 3:
            raise ValueError("Invalid value for `login`, length must be greater than or equal to `3`")  # noqa: E501
        if login is not None and not re.search(r'^[a-z0-9]+(?:-[a-z0-9]+)*$', login):  # noqa: E501
            raise ValueError("Invalid value for `login`, must be a follow pattern or equal to `/^[a-z0-9]+(?:-[a-z0-9]+)*$/`")  # noqa: E501

        self._login = login

    @property
    def organizer_roles(self):
        """Gets the organizer_roles of this ChallengeOrganizerCreateRequest.


        :return: The organizer_roles of this ChallengeOrganizerCreateRequest.
        :rtype: List[ChallengeOrganizerRole]
        """
        return self._organizer_roles

    @organizer_roles.setter
    def organizer_roles(self, organizer_roles):
        """Sets the organizer_roles of this ChallengeOrganizerCreateRequest.


        :param organizer_roles: The organizer_roles of this ChallengeOrganizerCreateRequest.
        :type organizer_roles: List[ChallengeOrganizerRole]
        """

        self._organizer_roles = organizer_roles
