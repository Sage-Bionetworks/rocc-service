# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class UserCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first_name=None, last_name=None, email=None, organizations=None):  # noqa: E501
        """UserCreateRequest - a model defined in OpenAPI

        :param first_name: The first_name of this UserCreateRequest.  # noqa: E501
        :type first_name: str
        :param last_name: The last_name of this UserCreateRequest.  # noqa: E501
        :type last_name: str
        :param email: The email of this UserCreateRequest.  # noqa: E501
        :type email: str
        :param organizations: The organizations of this UserCreateRequest.  # noqa: E501
        :type organizations: List[str]
        """
        self.openapi_types = {
            'first_name': str,
            'last_name': str,
            'email': str,
            'organizations': List[str]
        }

        self.attribute_map = {
            'first_name': 'firstName',
            'last_name': 'lastName',
            'email': 'email',
            'organizations': 'organizations'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._organizations = organizations

    @classmethod
    def from_dict(cls, dikt) -> 'UserCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserCreateRequest of this UserCreateRequest.  # noqa: E501
        :rtype: UserCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first_name(self):
        """Gets the first_name of this UserCreateRequest.

        The first name of the person  # noqa: E501

        :return: The first_name of this UserCreateRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserCreateRequest.

        The first name of the person  # noqa: E501

        :param first_name: The first_name of this UserCreateRequest.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserCreateRequest.

        The last name of the person  # noqa: E501

        :return: The last_name of this UserCreateRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserCreateRequest.

        The last name of the person  # noqa: E501

        :param last_name: The last_name of this UserCreateRequest.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UserCreateRequest.

        An email address  # noqa: E501

        :return: The email of this UserCreateRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserCreateRequest.

        An email address  # noqa: E501

        :param email: The email of this UserCreateRequest.
        :type email: str
        """

        self._email = email

    @property
    def organizations(self):
        """Gets the organizations of this UserCreateRequest.

        The organizations the person belongs to  # noqa: E501

        :return: The organizations of this UserCreateRequest.
        :rtype: List[str]
        """
        return self._organizations

    @organizations.setter
    def organizations(self, organizations):
        """Sets the organizations of this UserCreateRequest.

        The organizations the person belongs to  # noqa: E501

        :param organizations: The organizations of this UserCreateRequest.
        :type organizations: List[str]
        """

        self._organizations = organizations
