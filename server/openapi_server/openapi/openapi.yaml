openapi: 3.0.2
info:
  contact:
    email: contact@example.com
    url: http://example.com/contact
  description: |
    The OpenAPI specification implemented by the Challenge Registries.
    # Introduction
    TBA
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://example.com/terms/
  title: Challenge API
  version: 0.1.0
  x-logo:
    url: rocc_logo_black.png
servers:
- url: '{protocol}://rocc.com/{environment}/v1'
  variables:
    protocol:
      default: https
      enum:
      - http
      - https
    environment:
      default: api.dev
      enum:
      - api
      - api.dev
tags:
- description: Challenge operations
  name: Challenge
- description: User operations
  name: User
paths:
  /challenges:
    get:
      operationId: challenges_read_all
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Challenge'
                type: array
          description: Success
        "404":
          description: Request not available
      summary: Lists all challenges
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
    post:
      description: This can only be done by a Challenge Organizer
      operationId: challenges_create
      requestBody:
        content:
          application/json:
            example:
              id: CH1234567
              name: Sample Challenge
              startDate: 2020-11-10
              endDate: 2020-12-31
              status: open
            schema:
              $ref: '#/components/schemas/Challenge'
        required: true
      responses:
        "201":
          description: Challenge created
        "403":
          description: Forbidden
      summary: Adds a challenge
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
  /challenges/{id}:
    delete:
      description: |
        Removes the challenge of the given ID

        This action can only be done by a Challenge Organizer.
      operationId: challenges_delete
      parameters:
      - description: challenge ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: Challenge removed
        "400":
          description: Invalid challenge ID
        "403":
          description: Forbidden
        "422":
          description: Challenge not found
      summary: Removes a challenge
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
    get:
      description: Returns the challenge for a given ID
      operationId: challenges_read
      parameters:
      - description: challenge ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
          description: Success
        "400":
          description: Invalid challenge ID
        "422":
          description: Challenge not found
      summary: Lists one challenge
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
    patch:
      description: |
        Updates and/or adds one or more details of the given challenge ID.

        This action can only be done by a Challenge Organizer.
      operationId: challenges_update
      parameters:
      - description: challenge ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: OK
        "400":
          description: Invalid challenge ID
        "403":
          description: Forbidden
        "422":
          description: Challenge not found
      summary: Updates selected details of a challenge
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
    put:
      description: |
        Updates all details of the given challenge ID.

        This action can only be done by a Challenge Organizer.
      operationId: challenges_update_all
      parameters:
      - description: challenge ID
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Invalid challenge ID
        "403":
          description: Forbidden
        "422":
          description: Challenge not found
      summary: Updates all details of a challenge
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
  /users/{username}:
    get:
      description: |
        Some description of the operation.
        You can use `markdown` here.
      operationId: get_user_by_name
      parameters:
      - description: Pretty print response
        explode: true
        in: query
        name: pretty_print
        required: false
        schema:
          type: boolean
        style: form
      - description: The name that needs to be fetched
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      - description: Filter users without email
        explode: true
        in: query
        name: with_email
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                username: user1
                email: user@example.com
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "403":
          description: Forbidden
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - User
      x-openapi-router-controller: openapi_server.controllers.user_controller
    put:
      description: This can only be done by the logged in user.
      operationId: update_user
      parameters:
      - description: Pretty print response
        explode: true
        in: query
        name: pretty_print
        required: false
        schema:
          type: boolean
        style: form
      - description: The name that needs to be updated
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      summary: Updated user
      tags:
      - User
      x-openapi-router-controller: openapi_server.controllers.user_controller
components:
  schemas:
    Organization:
      description: Organization
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        url:
          type: string
      required:
      - name
      type: object
    Grant:
      description: Information about monetary resources for challenge
      properties:
        id:
          readOnly: true
          type: string
        name:
          type: string
        description:
          type: string
        sponsor:
          $ref: '#/components/schemas/Organization'
        amount:
          format: float
          type: integer
        url:
          type: string
      required:
      - name
      - sponsor
      type: object
    Email:
      description: User email address
      example: john.smith@example.com
      format: test
      type: string
    Person:
      properties:
        id:
          readOnly: true
          type: string
        firstName:
          example: John
          minLength: 1
          type: string
        lastName:
          example: Smith
          minLength: 1
          type: string
        email:
          description: User email address
          example: john.smith@example.com
          format: test
          type: string
      required:
      - email
      - firstName
      type: object
    Challenge:
      description: A challenge
      example:
        id: CH1234567
        name: Sample Challenge
        startDate: 2020-11-10
        endDate: 2020-12-31
        website: www.rocc.com/challenges/CH1234567
        status: closed
        tags:
        - Machine Learning
        organizers:
        - id: 1
          firstName: John
          lastName: Smith
          email: john.smith@example.org
        - id: 2
          firstName: J
          lastName: Doe
          email: jane.doe@example.org
      properties:
        id:
          description: Challenge ID
          readOnly: true
          type: string
        name:
          description: Name of challenge
          type: string
        startDate:
          description: Starting date (when submissions are accepted) in YYYY-MM-DD
            format
          format: date
          type: string
        endDate:
          description: Ending date (when submissions are no longer accepted) in YYYY-MM-DD
            format
          format: date
          type: string
        website:
          description: URL to challenge website
          format: url
          type: string
        status:
          description: Current status of challenge
          enum:
          - upcoming
          - open
          - closed
          type: string
        tags:
          description: Domains/area of expertise, e.g. "Breast Cancer", "Machine Learning"
          items:
            type: string
          minItems: 1
          type: array
        grant:
          description: Monetary/resources sponsorship for challenge
          items:
            $ref: '#/components/schemas/Grant'
          type: array
        organizers:
          description: Persons involved with the challenge, e.g. clinical leads, data
            providers, governance
          items:
            $ref: '#/components/schemas/Person'
          type: array
      required:
      - endDate
      - name
      - startDate
      - status
      type: object
    User:
      example:
        id: 1
        username: John78
        firstName: John
        lastName: Smith
        email: john.smith@example.com
        organizations:
        - id: 1
          name: Organization1
      properties:
        id:
          readOnly: true
          type: string
        username:
          minLength: 4
          type: string
        password:
          format: password
          minLength: 3
          type: string
          writeOnly: true
        firstName:
          description: User first name
          minLength: 1
          type: string
        lastName:
          description: User last name
          minLength: 1
          type: string
        email:
          description: User email address
          example: john.smith@example.com
          format: test
          type: string
        role:
          default: user
          enum:
          - user
          - admin
          type: string
        organizations:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
      required:
      - email
      - username
      type: object
