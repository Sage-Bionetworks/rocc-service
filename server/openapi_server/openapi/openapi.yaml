openapi: 3.0.2
info:
  contact:
    email: thomas.schaffter@sagebionetworks.org
    name: The ROCC Team
    url: https://Sage-Bionetworks.github.io/rocc-schemas
  description: |
    The OpenAPI specification implemented by the Challenge Registries.
    # Introduction
    TBA
  license:
    name: Apache 2.0
    url: https://Sage-Bionetworks.github.io/rocc-schemas
  title: Registry of Open Community Challenge API
  version: 0.1.5
  x-logo:
    url: https://Sage-Bionetworks.github.io/rocc-schemas/logo.png
servers:
- url: '{protocol}://rocc.org/api/v1'
  variables:
    protocol:
      default: https
      enum:
      - http
      - https
tags:
- description: Operations about challenges
  name: Challenge
- description: Operations about grants
  name: Grant
- description: Operations about organizations
  name: Organization
- description: Operations about persons
  name: Person
- description: Operations about tags
  name: Tag
- description: Operations about users
  name: User
- description: Operations about health checks
  name: HealthCheck
paths:
  /challenges:
    delete:
      description: Delete all challenges
      operationId: delete_all_challenges
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete all challenges
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
    get:
      description: Returns all the challenges
      operationId: list_challenges
      parameters:
      - description: Maximum number of results returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Index of the first result that must be returned
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Object that describes how to filter the results
        explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: '#/components/schemas/ChallengeFilter'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfChallenges'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: List all the challenges
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
    post:
      description: Adds a challenge
      operationId: create_challenge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeCreateRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChallengeCreateResponse'
          description: Success
          links:
            GetChallengeById:
              $ref: '#/components/links/GetChallengeById'
            DeleteChallengeById:
              $ref: '#/components/links/DeleteChallengeById'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request conflicts with current state of the target resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Add a challenge
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
  /challenges/{challengeId}:
    delete:
      description: Deletes the challenge specified
      operationId: delete_challenge
      parameters:
      - description: The ID of the challenge
        explode: false
        in: path
        name: challengeId
        required: true
        schema:
          $ref: '#/components/schemas/ChallengeId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete a challenge
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
    get:
      description: Returns the challenge specified
      operationId: get_challenge
      parameters:
      - description: The ID of the challenge
        explode: false
        in: path
        name: challengeId
        required: true
        schema:
          $ref: '#/components/schemas/ChallengeId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get a challenge
      tags:
      - Challenge
      x-openapi-router-controller: openapi_server.controllers.challenge_controller
  /grants:
    delete:
      description: Delete all grants
      operationId: delete_all_grants
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete all grants
      tags:
      - Grant
      x-openapi-router-controller: openapi_server.controllers.grant_controller
    get:
      description: Returns the grants
      operationId: list_grants
      parameters:
      - description: Maximum number of results returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Index of the first result that must be returned
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfGrants'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get all grants
      tags:
      - Grant
      x-openapi-router-controller: openapi_server.controllers.grant_controller
    post:
      description: Create a grant with the specified name
      operationId: create_grant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantCreateRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GrantCreateResponse'
          description: Success
          links:
            GetGrantById:
              $ref: '#/components/links/GetGrantById'
            DeleteGrantById:
              $ref: '#/components/links/DeleteGrantById'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request conflicts with current state of the target resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Create a grant
      tags:
      - Grant
      x-openapi-router-controller: openapi_server.controllers.grant_controller
  /grants/{grantId}:
    delete:
      description: Deletes the grant specified
      operationId: delete_grant
      parameters:
      - description: The ID of the grant that is being created
        explode: false
        in: path
        name: grantId
        required: true
        schema:
          $ref: '#/components/schemas/GrantId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete a grant
      tags:
      - Grant
      x-openapi-router-controller: openapi_server.controllers.grant_controller
    get:
      description: Returns the grant specified
      operationId: get_grant
      parameters:
      - description: The ID of the grant that is being created
        explode: false
        in: path
        name: grantId
        required: true
        schema:
          $ref: '#/components/schemas/GrantId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grant'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get a grant
      tags:
      - Grant
      x-openapi-router-controller: openapi_server.controllers.grant_controller
  /healthcheck:
    get:
      description: Get information about the health of the service
      operationId: get_health_check
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: Success
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get health check information
      tags:
      - HealthCheck
      x-openapi-router-controller: openapi_server.controllers.health_check_controller
  /organizations:
    delete:
      description: Delete all organizations
      operationId: delete_all_organizations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete all organizations
      tags:
      - Organization
      x-openapi-router-controller: openapi_server.controllers.organization_controller
    get:
      description: Returns the organizations
      operationId: list_organizations
      parameters:
      - description: Maximum number of results returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Index of the first result that must be returned
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfOrganizations'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get all organizations
      tags:
      - Organization
      x-openapi-router-controller: openapi_server.controllers.organization_controller
    post:
      description: Create an organization with the specified name
      operationId: create_organization
      parameters:
      - description: The ID of the organization that is being created
        explode: true
        in: query
        name: organizationId
        required: true
        schema:
          $ref: '#/components/schemas/OrganizationId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationCreateRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationCreateResponse'
          description: Success
          links:
            GetOrganizationById:
              $ref: '#/components/links/GetOrganizationById'
            DeleteOrganizationById:
              $ref: '#/components/links/DeleteOrganizationById'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request conflicts with current state of the target resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Create an organization
      tags:
      - Organization
      x-openapi-router-controller: openapi_server.controllers.organization_controller
  /organizations/{organizationId}:
    delete:
      description: Deletes the organization specified
      operationId: delete_organization
      parameters:
      - description: The ID of the organization
        explode: false
        in: path
        name: organizationId
        required: true
        schema:
          $ref: '#/components/schemas/OrganizationId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete an organization
      tags:
      - Organization
      x-openapi-router-controller: openapi_server.controllers.organization_controller
    get:
      description: Returns the organization specified
      operationId: get_organization
      parameters:
      - description: The ID of the organization
        explode: false
        in: path
        name: organizationId
        required: true
        schema:
          $ref: '#/components/schemas/OrganizationId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get an organization
      tags:
      - Organization
      x-openapi-router-controller: openapi_server.controllers.organization_controller
  /persons:
    delete:
      description: Delete all persons
      operationId: delete_all_persons
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete all persons
      tags:
      - Person
      x-openapi-router-controller: openapi_server.controllers.person_controller
    get:
      description: Returns the persons
      operationId: list_persons
      parameters:
      - description: Maximum number of results returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Index of the first result that must be returned
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Object that describes how to filter the results
        explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: '#/components/schemas/PersonFilter'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfPersons'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get all persons
      tags:
      - Person
      x-openapi-router-controller: openapi_server.controllers.person_controller
    post:
      description: Create a person with the specified name
      operationId: create_person
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonCreateResponse'
          description: Success
          links:
            GetPersonById:
              $ref: '#/components/links/GetPersonById'
            DeletePersonById:
              $ref: '#/components/links/DeletePersonById'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request conflicts with current state of the target resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Create a person
      tags:
      - Person
      x-openapi-router-controller: openapi_server.controllers.person_controller
  /persons/{personId}:
    delete:
      description: Deletes the person specified
      operationId: delete_person
      parameters:
      - description: The ID of the person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          $ref: '#/components/schemas/PersonId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete a person
      tags:
      - Person
      x-openapi-router-controller: openapi_server.controllers.person_controller
    get:
      description: Returns the person specified
      operationId: get_person
      parameters:
      - description: The ID of the person
        explode: false
        in: path
        name: personId
        required: true
        schema:
          $ref: '#/components/schemas/PersonId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get a person
      tags:
      - Person
      x-openapi-router-controller: openapi_server.controllers.person_controller
  /tags:
    delete:
      description: Delete all tags
      operationId: delete_all_tags
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete all tags
      tags:
      - Tag
      x-openapi-router-controller: openapi_server.controllers.tag_controller
    get:
      description: Returns the tags
      operationId: list_tags
      parameters:
      - description: Maximum number of results returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Index of the first result that must be returned
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: Object that describes how to filter the results
        explode: true
        in: query
        name: filter
        required: false
        schema:
          $ref: '#/components/schemas/TagFilter'
        style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfTags'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get all tags
      tags:
      - Tag
      x-openapi-router-controller: openapi_server.controllers.tag_controller
    post:
      description: Create a tag with the specified name
      operationId: create_tag
      parameters:
      - description: The ID of the tag that is being created
        explode: true
        in: query
        name: tagId
        required: true
        schema:
          $ref: '#/components/schemas/TagId'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagCreateRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCreateResponse'
          description: Success
          links:
            GetTagById:
              $ref: '#/components/links/GetTagById'
            DeleteTagById:
              $ref: '#/components/links/DeleteTagById'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request conflicts with current state of the target resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Create a tag
      tags:
      - Tag
      x-openapi-router-controller: openapi_server.controllers.tag_controller
  /tags/{tagId}:
    delete:
      description: Deletes the tag specified
      operationId: delete_tag
      parameters:
      - description: The ID of the tag
        explode: false
        in: path
        name: tagId
        required: true
        schema:
          $ref: '#/components/schemas/TagId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete a tag
      tags:
      - Tag
      x-openapi-router-controller: openapi_server.controllers.tag_controller
    get:
      description: Returns the tag specified
      operationId: get_tag
      parameters:
      - description: The ID of the tag
        explode: false
        in: path
        name: tagId
        required: true
        schema:
          $ref: '#/components/schemas/TagId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get a tag
      tags:
      - Tag
      x-openapi-router-controller: openapi_server.controllers.tag_controller
  /users:
    delete:
      description: Delete all users
      operationId: delete_all_users
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete all users
      tags:
      - User
      x-openapi-router-controller: openapi_server.controllers.user_controller
    get:
      description: Returns the users
      operationId: list_users
      parameters:
      - description: Maximum number of results returned
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          maximum: 100
          minimum: 10
          type: integer
        style: form
      - description: Index of the first result that must be returned
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfUsers'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get all users
      tags:
      - User
      x-openapi-router-controller: openapi_server.controllers.user_controller
    post:
      description: Create a user with the specified username
      operationId: create_user
      parameters:
      - description: The username of the user that is being created
        explode: true
        in: query
        name: username
        required: true
        schema:
          $ref: '#/components/schemas/Username'
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreateResponse'
          description: Success
          links:
            GetUserById:
              $ref: '#/components/links/GetUserById'
            DeleteUserById:
              $ref: '#/components/links/DeleteUserById'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request conflicts with current state of the target resource
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Create a user
      tags:
      - User
      x-openapi-router-controller: openapi_server.controllers.user_controller
  /users/{username}:
    delete:
      description: Deletes the user specified
      operationId: delete_user
      parameters:
      - description: The username of the user
        explode: false
        in: path
        name: username
        required: true
        schema:
          $ref: '#/components/schemas/Username'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyObject'
          description: Success
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Delete a user
      tags:
      - User
      x-openapi-router-controller: openapi_server.controllers.user_controller
    get:
      description: Returns the user specified
      operationId: get_user
      parameters:
      - description: The username of the user
        explode: false
        in: path
        name: username
        required: true
        schema:
          $ref: '#/components/schemas/Username'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Success
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The specified resource was not found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request cannot be fulfilled due to an unexpected server
            error
      summary: Get a user
      tags:
      - User
      x-openapi-router-controller: openapi_server.controllers.user_controller
components:
  links:
    GetChallengeById:
      description: |
        The `id` value returned in the response can be used as the `challengeId` parameter in `GET /challenges/{challengeId}`
      operationId: getChallenge
      parameters:
        challengeId: $response.body#/challengeId
    DeleteChallengeById:
      description: |
        The `id` value returned in the response can be used as the `challengeId` parameter in `DELETE /challenges/{challengeId}`
      operationId: deleteChallenge
      parameters:
        challengeId: $response.body#/challengeId
    GetGrantById:
      description: |
        The `id` value returned in the response can be used as the `grantId` parameter in `GET /grants/{grantId}`
      operationId: getGrant
      parameters:
        grantId: $response.body#/grantId
    DeleteGrantById:
      description: |
        The `id` value returned in the response can be used as the `grantId` parameter in `DELETE /grants/{grantId}`
      operationId: deleteGrant
      parameters:
        grantId: $response.body#/grantId
    GetOrganizationById:
      description: |
        The `id` value returned in the response can be used as the `organizationId` parameter in `GET /organizations/{organizationId}`
      operationId: getOrganization
      parameters:
        organizationId: $response.body#/organizationId
    DeleteOrganizationById:
      description: |
        The `id` value returned in the response can be used as the `organizationId` parameter in `DELETE /organizations/{organizationId}`
      operationId: deleteOrganization
      parameters:
        organizationId: $response.body#/organizationId
    GetPersonById:
      description: |
        The `id` value returned in the response can be used as the `personId` parameter in `GET /persons/{personId}`
      operationId: getPerson
      parameters:
        personId: $response.body#/personId
    DeletePersonById:
      description: |
        The `id` value returned in the response can be used as the `personId` parameter in `DELETE /persons/{personId}`
      operationId: deletePerson
      parameters:
        personId: $response.body#/personId
    GetTagById:
      description: |
        The `id` value returned in the response can be used as the `tagId` parameter in `GET /tags/{tagId}`
      operationId: getTag
      parameters:
        tagId: $response.body#/tagId
    DeleteTagById:
      description: |
        The `id` value returned in the response can be used as the `tagId` parameter in `DELETE /tags/{tagId}`
      operationId: deleteTag
      parameters:
        tagId: $response.body#/tagId
    GetUserById:
      description: |
        The `username` value returned in the response can be used as the `username` parameter in `GET /users/{username}`
      operationId: getUser
      parameters:
        username: $response.body#/username
    DeleteUserById:
      description: |
        The `username` value returned in the response can be used as the `username` parameter in `DELETE /users/{username}`
      operationId: deleteUser
      parameters:
        username: $response.body#/username
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Invalid request
    InternalServerError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request cannot be fulfilled due to an unexpected server error
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The request conflicts with current state of the target resource
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: The specified resource was not found
  schemas:
    ChallengeStatus:
      description: The status of the challenge
      enum:
      - upcoming
      - open
      - closed
      example: open
      title: ChallengeStatus
      type: string
    ChallengeFilter:
      description: An object that describes how to filter Challenges
      properties:
        name:
          description: Keep the challenges whose name include this term
          title: name
          type: string
        status:
          $ref: '#/components/schemas/ChallengeStatus'
        organizer:
          description: Keep the challenges organized by this person
          title: organizer
          type: string
        tag:
          description: Keep the challenges associated to this tag
          title: tag
          type: string
      title: ChallengeFilter
      type: object
    ResponsePageMetadata:
      description: A page of results
      properties:
        offset:
          description: Index of the first result that must be returned
          type: integer
        limit:
          description: Maximum number of results returned
          type: integer
        paging:
          $ref: '#/components/schemas/ResponsePageMetadata_paging'
        totalResults:
          description: Total number of results in the result set
          type: integer
      required:
      - limit
      - offset
      - paging
      type: object
    ChallengeId:
      description: The ID of the challenge
      example: awesome-challenge
      maxLength: 60
      minLength: 3
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      type: string
    ChallengeCreateResponse:
      description: A challenge ID
      example:
        id: awesome-challenge
      properties:
        id:
          description: The ID of the challenge
          example: awesome-challenge
          maxLength: 60
          minLength: 3
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          type: string
      required:
      - id
      title: ChallengeCreateResponse
      type: object
    TagId:
      description: The ID of the tag
      example: awesome-tag
      maxLength: 60
      minLength: 1
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      title: TagId
      type: string
    PersonId:
      description: The ID of the person
      example: 507f1f77bcf86cd799439011
      title: PersonId
      type: string
    OrganizationId:
      description: The ID of the organization
      example: awesome-organization
      maxLength: 60
      minLength: 3
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      title: OrganizationId
      type: string
    ChallengeCreateRequest:
      description: A challenge
      example:
        name: Awesome Challenge
        description: This challenge is awesome.
        summary: This challenge is awesome.
        startDate: 2020-11-10
        endDate: 2020-12-31
        url: https://synapse.org/awesome-challenge
        status: open
        tagIds:
        - awesome-tag1
        - awesome-tag2
        organizerIds:
        - 507f1f77bcf86cd799439011
        dataProviderIds:
        - awesome-organization
      properties:
        name:
          description: The challenge name
          maxLength: 60
          minLength: 3
          type: string
        description:
          description: A short description of the challenge
          maxLength: 280
          type: string
        summary:
          description: The summary of challenge
          type: string
        startDate:
          description: When the challenge started
          format: date
          type: string
        endDate:
          description: When the challenge ended
          format: date
          type: string
        url:
          description: The URL to the challenge website
          format: uri
          type: string
        status:
          $ref: '#/components/schemas/ChallengeStatus'
        tagIds:
          description: The tags associated to the challenge
          items:
            $ref: '#/components/schemas/TagId'
          type: array
        organizerIds:
          description: The organizers of the challenge
          items:
            $ref: '#/components/schemas/PersonId'
          type: array
        dataProviderIds:
          description: The organizations contributing the data
          items:
            $ref: '#/components/schemas/OrganizationId'
          type: array
      required:
      - dataProviderIds
      - description
      - name
      - organizerIds
      - status
      - tagIds
      - url
      type: object
    Challenge:
      allOf:
      - $ref: '#/components/schemas/ChallengeCreateResponse'
      - $ref: '#/components/schemas/ChallengeCreateRequest'
      description: A challenge
      title: Challenge
      type: object
    PageOfChallenges:
      allOf:
      - $ref: '#/components/schemas/ResponsePageMetadata'
      - $ref: '#/components/schemas/PageOfChallenges_allOf'
      description: A page of Challenges
      title: PageOfChallenges
      type: object
    Error:
      description: Problem details (tools.ietf.org/html/rfc7807)
      properties:
        title:
          description: A human readable documentation for the problem type
          title: title
          type: string
        status:
          description: The HTTP status code
          title: status
          type: integer
        detail:
          description: A human readable explanation specific to this occurrence of
            the problem
          title: detail
          type: string
        type:
          description: An absolute URI that identifies the problem type
          title: type
          type: string
      required:
      - status
      - title
      title: Error
      type: object
    EmptyObject:
      description: Empty JSON object
      type: object
    GrantId:
      description: The ID of the grant
      example: 507f1f77bcf86cd799439011
      type: string
    GrantCreateResponse:
      description: A grant ID
      example:
        id: 507f1f77bcf86cd799439011
      properties:
        id:
          description: The ID of the grant
          example: 507f1f77bcf86cd799439011
          type: string
      title: GrantCreateResponse
      type: object
    GrantCreateRequest:
      description: Information about monetary resources for challenge
      example:
        name: Awesome Grant
        description: This is an awesome grant
        url: https://report.nih.gov/
      properties:
        name:
          description: The grant name
          type: string
        description:
          description: A description of the grant
          type: string
        url:
          description: The URL to the grant
          format: uri
          type: string
      required:
      - name
      type: object
    Grant:
      allOf:
      - $ref: '#/components/schemas/GrantCreateResponse'
      - $ref: '#/components/schemas/GrantCreateRequest'
      description: Information about monetary resources for challenge
      title: Grant
      type: object
    PageOfGrants:
      allOf:
      - $ref: '#/components/schemas/ResponsePageMetadata'
      - $ref: '#/components/schemas/PageOfGrants_allOf'
      description: A page of Grants
      title: PageOfGrants
      type: object
    OrganizationCreateResponse:
      description: An organization ID
      example:
        id: awesome-organization
      properties:
        id:
          description: The ID of the organization
          example: awesome-organization
          maxLength: 60
          minLength: 3
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          title: OrganizationId
          type: string
      required:
      - id
      title: OrganizationCreateResponse
      type: object
    OrganizationCreateRequest:
      description: An organization
      example:
        name: Awesome Organization
        shortName: AO
        url: https://www.example.org
      properties:
        name:
          description: The organization name
          type: string
        shortName:
          description: The organization short name
          type: string
        url:
          description: The URL to the homepage of the organization
          format: uri
          type: string
      required:
      - name
      - url
      type: object
    Organization:
      allOf:
      - $ref: '#/components/schemas/OrganizationCreateResponse'
      - $ref: '#/components/schemas/OrganizationCreateRequest'
      description: An organization
      title: Organization
      type: object
    PageOfOrganizations:
      allOf:
      - $ref: '#/components/schemas/ResponsePageMetadata'
      - $ref: '#/components/schemas/PageOfOrganizations_allOf'
      description: A page of Organizations
      title: PageOfOrganizations
      type: object
    PersonFilter:
      description: An object that describes how to filter Persons
      properties:
        firstName:
          description: Keep the persons whose first name starts with this term
          title: firstName
          type: string
        lastName:
          description: Keep the persons whose last name starts with this term
          title: lastName
          type: string
        email:
          description: Keep the persons whose email matches this term
          title: email
          type: string
        organization:
          description: Keep the persons who belong to this organization
          title: organization
          type: string
      title: PersonFilter
      type: object
    PersonCreateResponse:
      description: A person ID
      example:
        id: 507f1f77bcf86cd799439011
      properties:
        id:
          description: The ID of the person
          example: 507f1f77bcf86cd799439011
          title: PersonId
          type: string
      required:
      - id
      title: PersonCreateResponse
      type: object
    Email:
      description: An email address
      example: john.smith@example.com
      format: email
      type: string
    PersonCreateRequest:
      description: A person
      example:
        firstName: John
        lastName: Smith
        email: john.smith@example.com
        organizationIds:
        - awesome-organization
      properties:
        firstName:
          description: The first name of the person
          type: string
        lastName:
          description: The last name of the person
          type: string
        email:
          description: An email address
          example: john.smith@example.com
          format: email
          type: string
        organizationIds:
          description: The organizations the person belongs to
          items:
            $ref: '#/components/schemas/OrganizationId'
          type: array
      required:
      - firstName
      - lastName
      - organizationIds
      type: object
    Person:
      allOf:
      - $ref: '#/components/schemas/PersonCreateResponse'
      - $ref: '#/components/schemas/PersonCreateRequest'
      description: A person
      title: Person
      type: object
    PageOfPersons:
      allOf:
      - $ref: '#/components/schemas/ResponsePageMetadata'
      - $ref: '#/components/schemas/PageOfPersons_allOf'
      description: A page of Persons
      title: PageOfPersons
      type: object
    TagFilter:
      description: An object that describes how to filter Tags
      properties:
        id:
          description: Keep the tags whose ID starts with this term
          title: id
          type: string
      title: TagFilter
      type: object
    TagCreateResponse:
      description: A tag ID
      example:
        id: awesome-tag
      properties:
        id:
          description: The ID of the tag
          example: awesome-tag
          maxLength: 60
          minLength: 1
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          title: TagId
          type: string
      required:
      - id
      title: TagCreateResponse
      type: object
    TagCreateRequest:
      description: A tag that can be assigned to a resource
      example:
        description: Awesome tag
      properties:
        description:
          description: A short description of the tag
          type: string
      required:
      - description
      type: object
    Tag:
      allOf:
      - $ref: '#/components/schemas/TagCreateResponse'
      - $ref: '#/components/schemas/TagCreateRequest'
      description: A tag that can be assigned to a resource
      title: Tag
      type: object
    PageOfTags:
      allOf:
      - $ref: '#/components/schemas/ResponsePageMetadata'
      - $ref: '#/components/schemas/PageOfTags_allOf'
      description: A page of Tags
      title: PageOfTags
      type: object
    Username:
      description: The username of the user
      example: awesome-user
      maxLength: 25
      minLength: 3
      pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
      type: string
    UserCreateResponse:
      description: A user's username
      example:
        username: awesome-user
        role: user
      properties:
        username:
          description: The username of the user
          example: awesome-user
          maxLength: 25
          minLength: 3
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          type: string
        role:
          default: user
          description: The role of the user
          enum:
          - user
          - admin
          type: string
      title: UserCreateResponse
      type: object
    UserCreateRequest:
      allOf:
      - $ref: '#/components/schemas/PersonCreateRequest'
      description: A user of the service
      example:
        firstName: John
        lastName: Smith
        email: john.smith@example.com
        organizations:
        - awesome-organization
      type: object
    User:
      allOf:
      - $ref: '#/components/schemas/UserCreateResponse'
      - $ref: '#/components/schemas/UserCreateRequest'
      description: A user of the portal
      title: User
      type: object
    PageOfUsers:
      allOf:
      - $ref: '#/components/schemas/ResponsePageMetadata'
      - $ref: '#/components/schemas/PageOfUsers_allOf'
      description: A page of Users
      title: PageOfUsers
      type: object
    HealthCheck:
      description: Represents the health of a service
      example:
        status: pass
      properties:
        status:
          description: Indicates whether the service status is acceptable or not
          enum:
          - pass
          - fail
          - warn
          title: status
          type: string
      required:
      - status
      title: HealthCheck
      type: object
    ResponsePageMetadata_paging:
      description: Links to navigate to different pages of results
      properties:
        next:
          description: Link to the next page of results
          format: uri
          title: next
          type: string
      title: ResponsePageMetadata_paging
      type: object
    PageOfChallenges_allOf:
      properties:
        challenges:
          description: An array of Challenges
          items:
            $ref: '#/components/schemas/Challenge'
          type: array
      type: object
    PageOfGrants_allOf:
      properties:
        grants:
          description: An array of Grants
          items:
            $ref: '#/components/schemas/Grant'
          type: array
      type: object
    PageOfOrganizations_allOf:
      properties:
        organizations:
          description: An array of Organizations
          items:
            $ref: '#/components/schemas/Organization'
          type: array
      type: object
    PageOfPersons_allOf:
      properties:
        persons:
          description: An array of Persons
          items:
            $ref: '#/components/schemas/Person'
          type: array
      type: object
    PageOfTags_allOf:
      properties:
        tags:
          description: An array of Tags
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      type: object
    PageOfUsers_allOf:
      properties:
        users:
          description: An array of Users
          items:
            $ref: '#/components/schemas/User'
          type: array
      type: object
